#ifndef ESP32_COMMON_H
#define ESP32_COMMON_H

// ================================================================
// ========================= INCLUDES =============================
// ================================================================

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_log.h"
#include "esp_wifi.h"
#include "mqtt_client.h"
#include "nvs_flash.h"
#include "dht.h"
#include "smarthub_protocol.h"
#include "cJSON.h"

// ================================================================
// =================== CONSTANTS & DEFINES ========================
// ================================================================

// Конфигурация Wi-Fi и MQTT
#define WIFI_SSID       "Xiaomi_541D"
#define WIFI_PASS       "XTA210991926"
#define BROKER_URI      "mqtt://192.168.31.166:1883"

// Конфигурация для DHT11
static const int LIGHT_PIN = GPIO_NUM_22;
static const int DHT_PIN   = GPIO_NUM_4;

// ================================================================
// ==================== GLOBAL VARIABLES ==========================
// ================================================================

extern char *g_json_resp_light_on;
extern char *g_json_resp_light_off;
extern char *g_json_resp_command_error;

extern esp_mqtt_client_handle_t mqtt_client;
extern portMUX_TYPE reading_mux;

extern int g_is_synced;
extern int g_add_temp;
extern int g_is_light_on;

// ================================================================
// ========================= FUNCTION PROTOTYPES ==================
// ================================================================

// ------------------------------------------------
// Задача для периодического опроса датчика DHT11.
// Считывает температуру и влажность, после чего публикует
// данные в топик ESP32_TOPIC.
// ----------------------------------------------
void dht11_task(void *PIN);

// ------------------------------------------------
// Инициализирует и запускает Wi-Fi в режиме станции (STA) и
// регистрирует обработчики событий для подключения к сети и
// запуска MQTT.
//
// Возвращает ESP_OK в случае успеха.
// ------------------------------------------------
esp_err_t esp_wifi_mqtt_conf(void);

// ------------------------------------------------
// Обработчик событий MQTT-клиента.
// Вызывается библиотекой MQTT при подключении, отключении или получении
// данных. Обрабатывает команды изменения температуры от Linux-хаба.
// ------------------------------------------------
void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data);

// ------------------------------------------------
// Обработчик системных событий Wi-Fi и IP стека.
// Управляет логикой подключения к Wi-Fi и запускает MQTT-клиент
// только после успешного получения IP-адреса.
// ------------------------------------------------
void wifi_event_handler(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data);

// ----------------------------------------------------------------
// Динамически создает JSON-строку с актуальными данными сенсоров.
//
// Возвращает указатель на строку, которую необходимо
// освободить с помощью free() после использования.
// ----------------------------------------------------------------
char* create_sensor_data_json(float temp, float humidity);

// ----------------------------------------------------------------
// Инициализирует статические JSON-сообщения (ответы),
// которые ESP32 будет отправлять хабу.
//
// Возвращает ESP_OK в случае успеха или ESP_ERR_NO_MEM
// при ошибке выделения памяти.
// ----------------------------------------------------------------
esp_err_t init_esp32_json_messages(void);

// ----------------------------------------------------------------
// Освобождает память, выделенную для статических
// JSON-сообщений при их инициализации.
// ----------------------------------------------------------------
void cleanup_json_messages(void);

// ----------------------------------------------------------------
// Парсит и обрабатывает входящую JSON-команду,
// полученную от хаба по MQTT.
// ----------------------------------------------------------------
void process_json_command(const char *data, int len);

// ----------------------------------------------------------------
// Отправляет хабу JSON-сообщение с полным текущим
// состоянием устройства для синхронизации.
// ----------------------------------------------------------------
void send_full_state_response(void);

#endif

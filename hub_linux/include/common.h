#ifndef SMARTHUB_COMMON_H
#define SMARTHUB_COMMON_H

// ================================================================
// ========================= INCLUDES ============================
// ================================================================
#include <stdio.h>
#include <stdbool.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/select.h>
#include <stdarg.h>
#include <fcntl.h>
#include <stdlib.h>
#include <termios.h>
#include <string.h>
#include <mosquitto.h>
#include "cJSON.h"
#include "smarthub_protocol.h"
#include "errno.h"
#include "signal.h"
#include <sys/time.h>

// ================================================================
// ========================= ENUMS & CONSTANTS ===================
// ================================================================

// Общие константы
#define TTY_SPEED B9600
#define BUF_SIZE  1024

// Параметры подключения к устройствам
#define DEV_ARDUINO "/dev/ttyArduino"
#define MOSQ_PORT 1883
#define MOSQ_NAME "localhost"
#define MOSQ_TIME 100

// ================================================================
// ========================= GLOBAL VARIABLES ====================
// ================================================================
extern pthread_mutex_t g_state_mutex;
extern int g_update_arduino[2];
extern int g_update_esp32[2];
extern int g_sync_pipe[2];
extern int g_is_synced;

// Состояние устройств / сенсоров
extern volatile float g_temperature_celsius;
extern volatile float g_humidity_percent;
extern volatile int   g_is_door_open;
extern volatile int   g_is_alarm_enabled;
extern volatile int   g_is_motion_detected;
extern volatile int   g_is_light_on;

// ================================================================
// ========================= FUNCTION PROTOTYPES =================
// ================================================================

// ------------------------------------------------
// Записывает сообщение об ошибке в лог-файл
// и завершает выполнение программы.
// ------------------------------------------------
void err_quit(const char* format, ...);

// ------------------------------------------------
// Очищает консоль и отображает актуальное меню
// с текущим состоянием всех устройств.
// ------------------------------------------------
void displayMenu();

// ------------------------------------------------
// Основная функция потока, которая непрерывно читает
// данные из Serial-порта Arduino и передает их на обработку.
// ------------------------------------------------
void* arduinoThread(void* arg);

// ------------------------------------------------
// Инициализирует MQTT-клиент для связи с ESP32,
// настраивает колбэки и запускает цикл обработки сообщений.
// ------------------------------------------------
struct mosquitto *esp32_mqtt_init(int *fd);

// ------------------------------------------------
// Отправляет соответствующую JSON-команду на устройство
// (Arduino или ESP32) на основе символа, введенного пользователем.
// ------------------------------------------------
void sendDeviceCommand(char com, int arduino_fd, struct mosquitto *mosq);

// ------------------------------------------------
// Открывает файловый дескриптор последовательного порта
// и настраивает его параметры (termios) для работы с Arduino.
// ------------------------------------------------
int open_and_configure_arduino_port();

// ------------------------------------------------
// Записывает форматированное сообщение с тегом
// в основной лог-файл программы (hub_log.txt).
// ------------------------------------------------
void HUB_LOG(const char* tag, const char *format, ...);

// ------------------------------------------------
// Отправляет ESP32 команду запросить полное состояние.
// Используется для начальной синхронизации.
// ------------------------------------------------
void request_full_state_from_esp32(struct mosquitto *mosq);

// ------------------------------------------------
// Отправляет Arduino команду запросить полное состояние.
// Используется для начальной синхронизации.
// ------------------------------------------------
void request_full_state_from_arduino(int fd);

// ------------------------------------------------
// Отправляет на ESP32 полное состояние хаба.
// Используется для принудительной синхронизации состояния ESP32.
// ------------------------------------------------
void send_full_state_to_esp32(struct mosquitto *mosq);

// ------------------------------------------------
// Отправляет на Arduino полное состояние хаба.
// Используется для начальной и периодической синхронизации.
// ------------------------------------------------
void send_full_state_to_arduino(int fd);

// ------------------------------------------------
// Парсит JSON-строку от Arduino и обновляет
// глобальные переменные состояния хаба.
// ------------------------------------------------
void process_arduino_json(const char* json_string);

// ------------------------------------------------
// Настраивает и запускает системный таймер для
// периодической отправки полного состояния на Arduino.
// ------------------------------------------------
void setup_periodic_sync_timer(void);

// ------------------------------------------------
// Гарантированно записывает N байт в файловый дескриптор,
// обрабатывая возможные неполные записи.
// ------------------------------------------------
ssize_t writen(int fd, const void *vptr, size_t n);

// ------------------------------------------------
// Инициализирует (заранее создает) все JSON-строки
// с командами, которые хаб будет отправлять устройствам.
// ------------------------------------------------
int init_json_commands(void);

#endif // SMARTHUB_COMMON_H
